{"version":3,"sources":["logo.svg","MyNav.js","Links.js","linkData.js","Home.js","Learning.js","WebDev.js","Misc.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyNav","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Links","props","url","target","site","linkData","Home","linkComponents","map","link","key","Learning","WebDev","Misc","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,qICwC5BC,MAlCf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,yBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,WAAf,UACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,aCPGQ,MARf,SAAeC,GACX,OACI,6BACA,2BAAG,gCAAQ,uBAAGT,KAAMS,EAAMC,IAAKC,OAAO,UAAUF,EAAMG,UCyB/CC,EA5BC,CACZ,CACIT,GAAI,mCACJQ,KAAM,aACNF,IAAK,8CAET,CACIN,GAAI,mCACJQ,KAAM,iBACNF,IAAK,4DAET,CACIN,GAAI,mCACJQ,KAAM,SACNF,IAAK,8DAET,CACIN,GAAI,mCACJQ,KAAM,cACNF,IAAK,0DAET,CACIN,GAAI,mCACJQ,KAAM,eACNF,IAAK,uKCTEI,MAZf,WACI,IAAMC,EAAiBF,EAASG,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAOC,IAAKD,EAAKb,GAAIQ,KAAMK,EAAKL,KAAMF,IAAKO,EAAKP,SAC9F,OAEE,6BACE,4CACCK,EACD,kBAAC,EAAD,QCDSI,MARf,WACE,OACE,6BACE,oDCKSC,MARf,WACE,OACE,6BACE,wCCKSC,MARf,WACE,OACE,6BACE,yDC4BSC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,KAAK,UAAUE,UAAWL,IACjC,kBAAC,IAAD,CAAOG,KAAK,YAAYE,UAAWN,IACnC,kBAAC,IAAD,CAAOI,KAAK,QAAQE,UAAWJ,QCfrBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e08153a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./App.css\";\nimport { Button, Nav, Navbar, NavDropdown, Form, FormControl } from \"react-bootstrap\";\n// this imports all of bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction MyNav() {\n  return (\n    <div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Course Services Links</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/webdev\">WebDev</Nav.Link>\n            <Nav.Link href=\"/learning\">Learning</Nav.Link>\n            <Nav.Link href=\"/misc\">Misc</Nav.Link>\n          {/*<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">\n                Another action\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">\n                Separated link\n              </NavDropdown.Item>\n            </NavDropdown>*/}\n          </Nav>\n          {/*<Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>*/}\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default MyNav;\n","import React from \"react\";\n\nfunction Links(props) {\n    return(\n        <div>\n        <p><strong><a href={props.url} target=\"_blank\">{props.site}</a></strong></p>\n        </div>\n    )\n}\n\nexport default Links","import React from 'react'\n\nconst linkData= [\n    {\n        id: 'df57d730ab8f54d7ab76e5c2a7722d0f',\n        site: 'ServiceNow',\n        url: 'https://flvsprd.service-now.com/navpage.do'\n    },\n    {\n        id: '77e5938f18b9a37d02657df141b7b15f',\n        site: 'Master Manager',\n        url: 'https://educatortools.flvs.net/educator_tools/index.html'\n    },\n    {\n        id: '558cfa417db9861a0a7fd21414e17cb2',\n        site: 'Bamboo',\n        url: 'http://app64.fvs.fvsonline.net:8085/currentActivity.action'\n    },\n    {\n        id: 'dc312932d1358f9d6014f8b195fb670f',\n        site: 'Link Manger',\n        url: 'https://l.flvsgl.com/user/plugins/multi-user/index.php'\n    },\n    {\n        id: '7848d0282b00ad2887699df313093144',\n        site: 'Course Holds',\n        url: 'https://tasks.office.com/FLVS1.onmicrosoft.com/en-US/Home/Planner/#/plantaskboard?groupId=17f0304f-76ef-4e84-a5c2-63d83cab04a1&planId=jX7XrvLw3kKnGdI8EsYVHWQAHkIN'\n    }\n]\n\nexport default linkData\n","import React from 'react';\nimport './App.css';\nimport Links from './Links'\nimport linkData from './linkData.js'\n\nfunction Home() {\n    const linkComponents = linkData.map(link => <Links key={link.id} site={link.site} url={link.url} />)\n  return (\n\n    <div>\n      <h1>Useful Links</h1>\n      {linkComponents}\n      <Links />\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\n\nfunction Learning() {\n  return (\n    <div>\n      <h1>Learning Resources</h1>\n    </div>\n  );\n}\n\nexport default Learning;","import React from 'react';\nimport './App.css';\n\nfunction WebDev() {\n  return (\n    <div>\n      <h1>WebDev</h1>\n    </div>\n  );\n}\n\nexport default WebDev;","import React from 'react';\nimport './App.css';\n\nfunction Misc() {\n  return (\n    <div>\n      <h1>Miscellaneous Resources</h1>\n    </div>\n  );\n}\n\nexport default Misc;","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nimport \"./App.css\";\n// import Button from 'react-bootstrap/Button'\n// this just imports bootstrap button\n\nimport { Button, Alert } from \"react-bootstrap\";\n// this imports all of bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport MyNav from \"./MyNav\";\nimport Home from \"./Home\";\nimport Learning from \"./Learning\";\nimport WebDev from \"./WebDev\";\nimport Misc from \"./Misc\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <MyNav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/webdev\" component={WebDev} />\n          <Route path=\"/learning\" component={Learning} />\n          <Route path=\"/misc\" component={Misc} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}